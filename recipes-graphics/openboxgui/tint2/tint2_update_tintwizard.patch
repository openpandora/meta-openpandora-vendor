diff -Naur a/src/tint2conf/tintwizard.py b/src/tint2conf/tintwizard.py
--- a/src/tint2conf/tintwizard.py	2013-07-27 23:57:55.621441373 +0100
+++ b/src/tint2conf/tintwizard.py	2013-07-28 00:00:23.056237609 +0100
@@ -17,7 +17,9 @@
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 #*************************************************************************/
-# Last modified: 14th June 2010
+# Last modified: 25th July 2011
+
+# Modified 8th December 2012 by freamon, for Open Pandora.
 
 import pygtk
 pygtk.require('2.0')
@@ -25,14 +27,14 @@
 import os
 import sys
 import signal
-import webbrowser
+# import webbrowser
 import math
 import shutil
 
 # Project information
 NAME = "tintwizard"
-AUTHORS = ["Euan Freeman <euan04@gmail.com>"]
-VERSION = "0.3.4"
+AUTHORS = ["Euan Freeman <euan04@gmail.com>"] 
+VERSION = "0.3.5"
 COMMENTS = "tintwizard generates config files for the lightweight panel replacement tint2"
 WEBSITE = "http://code.google.com/p/tintwizard/"
 
@@ -46,7 +48,7 @@
 PANEL_PADDING_X = "0"
 PANEL_PADDING_Y = "0"
 PANEL_MONITOR = "all"
-PANEL_ITEMS = "TSC"
+PANEL_ITEMS = "TC"
 PANEL_AUTOHIDE_SHOW = "0.0"
 PANEL_AUTOHIDE_HIDE = "0.0"
 PANEL_AUTOHIDE_HEIGHT = "0"
@@ -97,6 +99,14 @@
 BATTERY_ACTION = 'notify-send "battery low"'
 BATTERY_PADDING_X = "0"
 BATTERY_PADDING_Y = "0"
+LAUNCHERS_ICON_THEME = "LinuxLex-8"
+LAUNCHERS_PADDING_X = "0"
+LAUNCHERS_PADDING_Y = "0"
+LAUNCHERS_SPACING = "0"
+LAUNCHERS_ICON_SIZE = "0"
+LAUNCHERS_APP_1 = ""
+LAUNCHERS_APP_2 = ""
+LAUNCHERS_APP_3 = ""
 
 class TintWizardPrefGUI(gtk.Window):
 	"""The dialog window which lets the user change the default preferences."""
@@ -196,10 +206,10 @@
 		if self.defaults["borderColor"] in [None, "None"]:
 			self.defaults["borderColor"] = "#ffffff"
 
-		if os.path.exists(os.path.expandvars("${HOME}") + "/.config/tint2"):
-			self.curDir = os.path.expandvars("${HOME}") + "/.config/tint2"
+		if os.path.exists(os.path.expandvars("${XDG_CONFIG_HOME}") + "/tint2"):
+			self.curDir = os.path.expandvars("${XDG_CONFIG_HOME}") + "/tint2"
 		else:
-			errorDialog("$HOME/.config/tint2/ directory not found! Is tint2 installed correctly?")
+			errorDialog("$XDG_CONFIG_HOME/tint2/ directory not found! Is tint2 installed correctly?")
 			Sys.exit(1)
 
 		try:
@@ -331,6 +341,9 @@
 		self.createPanelDisplayWidgets()
 		self.createPanelSettingsWidgets()
 		self.createPanelAutohideWidgets()
+
+		# Launchers
+		self.createLaunchersWidgets()
 		
 		# Taskbar
 		self.createTaskbarWidgets()
@@ -357,7 +370,7 @@
 		
 		# Battery
 		self.createBatteryWidgets()
-		
+
 		# View Config
 		self.configArea = gtk.ScrolledWindow()
 		self.configBuf = gtk.TextBuffer()
@@ -398,6 +411,7 @@
 
 		# Add pages to notebook
 		self.notebook.append_page(self.tableBgs, gtk.Label("Backgrounds"))
+		self.notebook.append_page(self.tableLaunchers, gtk.Label("Launchers"))
 		self.notebook.append_page(self.panelNotebook, gtk.Label("Panel"))
 		self.notebook.append_page(self.tableTaskbar, gtk.Label("Taskbar"))
 		self.notebook.append_page(self.taskNotebook, gtk.Label("Tasks"))
@@ -445,7 +459,7 @@
 	
 	def createPanelDisplayWidgets(self):
 		"""Create the Panel Display widgets."""
-		self.tablePanelDisplay = gtk.Table(rows=7, columns=3, homogeneous=False)
+		self.tablePanelDisplay = gtk.Table(rows=6, columns=3, homogeneous=False)
 		self.tablePanelDisplay.set_row_spacings(5)
 		self.tablePanelDisplay.set_col_spacings(5)
 		
@@ -458,36 +472,32 @@
 		self.panelOrientation = createComboBox(self.tablePanelDisplay, ["horizontal", "vertical"], gridX=1, gridY=1, handler=self.changeOccurred)
 		self.registerComponent("panel_position", (self.panelPosY, self.panelPosX, self.panelOrientation))
 		
-		createLabel(self.tablePanelDisplay, text="Panel Items", gridX=0, gridY=2, xPadding=10)
-		self.panelItems = createEntry(self.tablePanelDisplay, maxSize=7, width=8, text=PANEL_ITEMS, gridX=1, gridY=2, xExpand=True, yExpand=False, handler=self.changeOccurred)
-		self.registerComponent("panel_items", self.panelItems)
-		
-		self.panelSizeLabel = createLabel(self.tablePanelDisplay, text="Size (width, height)", gridX=0, gridY=3, xPadding=10)
-		self.panelSizeX = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_SIZE_X, gridX=1, gridY=3, xExpand=True, yExpand=False, handler=self.changeOccurred)
-		self.panelSizeY = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_SIZE_Y, gridX=2, gridY=3, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.panelSizeLabel = createLabel(self.tablePanelDisplay, text="Size (width, height)", gridX=0, gridY=2, xPadding=10)
+		self.panelSizeX = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_SIZE_X, gridX=1, gridY=2, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.panelSizeY = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_SIZE_Y, gridX=2, gridY=2, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("panel_size", (self.panelSizeX, self.panelSizeY))
 		
-		createLabel(self.tablePanelDisplay, text="Margin (x, y)", gridX=0, gridY=4, xPadding=10)
-		self.panelMarginX = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_MARGIN_X, gridX=1, gridY=4, xExpand=True, yExpand=False, handler=self.changeOccurred)
-		self.panelMarginY = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_MARGIN_Y, gridX=2, gridY=4, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		createLabel(self.tablePanelDisplay, text="Margin (x, y)", gridX=0, gridY=3, xPadding=10)
+		self.panelMarginX = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_MARGIN_X, gridX=1, gridY=3, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.panelMarginY = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_MARGIN_Y, gridX=2, gridY=3, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("panel_margin", (self.panelMarginX, self.panelMarginY))
 		
-		createLabel(self.tablePanelDisplay, text="Padding (x, y)", gridX=0, gridY=5, xPadding=10)
-		self.panelPadX = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_PADDING_X, gridX=1, gridY=5, xExpand=True, yExpand=False, handler=self.changeOccurred)
-		self.panelPadY = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_PADDING_Y, gridX=2, gridY=5, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		createLabel(self.tablePanelDisplay, text="Padding (x, y)", gridX=0, gridY=4, xPadding=10)
+		self.panelPadX = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_PADDING_X, gridX=1, gridY=4, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.panelPadY = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=PANEL_PADDING_Y, gridX=2, gridY=4, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		# Note: added below
 		
-		createLabel(self.tablePanelDisplay, text="Horizontal Spacing", gridX=0, gridY=6, xPadding=10)
-		self.panelSpacing = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=TASKBAR_SPACING, gridX=1, gridY=6, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		createLabel(self.tablePanelDisplay, text="Horizontal Spacing", gridX=0, gridY=5, xPadding=10)
+		self.panelSpacing = createEntry(self.tablePanelDisplay, maxSize=6, width=8, text=TASKBAR_SPACING, gridX=1, gridY=5, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("panel_padding", (self.panelPadX, self.panelPadY, self.panelSpacing))
 		
-		createLabel(self.tablePanelDisplay, text="Panel Background ID", gridX=0, gridY=7, xPadding=10)
-		self.panelBg = createComboBox(self.tablePanelDisplay, ["0 (fully transparent)"] + range(1, len(self.bgs)), gridX=1, gridY=7, handler=self.changeOccurred)
+		createLabel(self.tablePanelDisplay, text="Panel Background ID", gridX=0, gridY=6, xPadding=10)
+		self.panelBg = createComboBox(self.tablePanelDisplay, ["0 (fully transparent)"] + range(1, len(self.bgs)), gridX=1, gridY=6, handler=self.changeOccurred)
 		self.registerComponent("panel_background_id", self.panelBg)
 		
 	def createPanelSettingsWidgets(self):
 		"""Create the Panel Settings widgets."""
-		self.tablePanelSettings = gtk.Table(rows=5, columns=3, homogeneous=False)
+		self.tablePanelSettings = gtk.Table(rows=6, columns=3, homogeneous=False)
 		self.tablePanelSettings.set_row_spacings(5)
 		self.tablePanelSettings.set_col_spacings(5)
 		
@@ -510,6 +520,10 @@
 		createLabel(self.tablePanelSettings, text="Panel Monitor (all, 1, 2, ...)", gridX=0, gridY=4, xPadding=10)
 		self.panelMonitor = createEntry(self.tablePanelSettings, maxSize=6, width=8, text=PANEL_MONITOR, gridX=1, gridY=4, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("panel_monitor", self.panelMonitor)
+
+		createLabel(self.tablePanelSettings, text="Panel Items (L)auncher, (T)askbar, (S)ystray, (C)lock, (B)attery", gridX=0, gridY=5, xPadding=10)
+		self.panelItems = createEntry(self.tablePanelSettings, maxSize=6, width=8, text=PANEL_ITEMS, gridX=1, gridY=5, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.registerComponent("panel_items", self.panelItems)
 		
 	def createPanelAutohideWidgets(self):
 		"""Create the Panel Autohide widgets."""
@@ -558,6 +572,7 @@
 		
 		createLabel(self.tableTaskbar, text="Active Taskbar Background ID", gridX=0, gridY=4, xPadding=10)
 		self.taskbarActiveBg = createComboBox(self.tableTaskbar, ["0 (fully transparent)"] + range(1, len(self.bgs)), gridX=1, gridY=4, handler=self.changeOccurred)
+		self.taskbarActiveBgEnable = createCheckButton(self.tableTaskbar, text="Enable", active=False, gridX=2, gridY=4, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("taskbar_active_background_id", self.taskbarActiveBg)
 	
 	def createTaskSettingsWidgets(self):
@@ -742,7 +757,11 @@
 		self.tableTray = gtk.Table(rows=9, columns=3, homogeneous=False)
 		self.tableTray.set_row_spacings(5)
 		self.tableTray.set_col_spacings(5)
-				
+		
+		createLabel(self.tableTray, text="Show System Tray", gridX=0, gridY=0, xPadding=10)
+		self.trayShow = createCheckButton(self.tableTray, active=True, gridX=1, gridY=0, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.registerComponent("systray", self.trayShow)
+		
 		createLabel(self.tableTray, text="Padding (x, y)", gridX=0, gridY=1, xPadding=10)
 		self.trayPadX = createEntry(self.tableTray, maxSize=6, width=8, text=TRAY_PADDING_X, gridX=1, gridY=1, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.trayPadY = createEntry(self.tableTray, maxSize=6, width=8, text=TRAY_PADDING_Y, gridX=2, gridY=1, xExpand=True, yExpand=False, handler=self.changeOccurred)
@@ -782,8 +801,12 @@
 		self.tableClockDisplays.set_row_spacings(5)
 		self.tableClockDisplays.set_col_spacings(5)
 		
+		createLabel(self.tableClockDisplays, text="Show", gridX=0, gridY=0, xPadding=10)
+		self.clockCheckButton = createCheckButton(self.tableClockDisplays, active=True, gridX=1, gridY=0, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		
 		createLabel(self.tableClockDisplays, text="Time 1 Format", gridX=0, gridY=1, xPadding=10)
 		self.clock1Format = createEntry(self.tableClockDisplays, maxSize=50, width=20, text=CLOCK_FMT_1, gridX=1, gridY=1, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.clock1CheckButton = createCheckButton(self.tableClockDisplays, text="Show", active=True, gridX=2, gridY=1, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("time1_format", self.clock1Format)
 		
 		createLabel(self.tableClockDisplays, text="Time 1 Font", gridX=0, gridY=2, xPadding=10)
@@ -792,6 +815,7 @@
 		
 		createLabel(self.tableClockDisplays, text="Time 2 Format", gridX=0, gridY=3, xPadding=10)
 		self.clock2Format = createEntry(self.tableClockDisplays, maxSize=50, width=20, text=CLOCK_FMT_2, gridX=1, gridY=3, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.clock2CheckButton = createCheckButton(self.tableClockDisplays, text="Show", active=True, gridX=2, gridY=3, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("time2_format", self.clock2Format)
 		
 		createLabel(self.tableClockDisplays, text="Time 2 Font", gridX=0, gridY=4, xPadding=10)
@@ -800,6 +824,7 @@
 		
 		createLabel(self.tableClockDisplays, text="Tooltip Format", gridX=0, gridY=5, xPadding=10)
 		self.clockTooltipFormat = createEntry(self.tableClockDisplays, maxSize=50, width=20, text=CLOCK_TOOLTIP, gridX=1, gridY=5, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.clockTooltipCheckButton = createCheckButton(self.tableClockDisplays, text="Show", active=True, gridX=2, gridY=5, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("clock_tooltip", self.clockTooltipFormat)
 		
 		self.clockArea = gtk.ScrolledWindow()
@@ -844,14 +869,17 @@
 		
 		createLabel(self.tableClockSettings, text="Time 1 Timezone", gridX=0, gridY=5, xPadding=10)
 		self.clockTime1Timezone = createEntry(self.tableClockSettings, maxSize=50, width=20, text=CLOCK_TIME1_TIMEZONE, gridX=1, gridY=5, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.clockTimezone1CheckButton = createCheckButton(self.tableClockSettings, text="Enable", active=False, gridX=2, gridY=5, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("time1_timezone", self.clockTime1Timezone)
 		
 		createLabel(self.tableClockSettings, text="Time 2 Timezone", gridX=0, gridY=6, xPadding=10)
 		self.clockTime2Timezone = createEntry(self.tableClockSettings, maxSize=50, width=20, text=CLOCK_TIME2_TIMEZONE, gridX=1, gridY=6, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.clockTimezone2CheckButton = createCheckButton(self.tableClockSettings, text="Enable", active=False, gridX=2, gridY=6, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("time2_timezone", self.clockTime2Timezone)
 		
 		createLabel(self.tableClockSettings, text="Tooltip Timezone", gridX=0, gridY=7, xPadding=10)
 		self.clockTooltipTimezone = createEntry(self.tableClockSettings, maxSize=50, width=20, text=CLOCK_TOOLTIP_TIMEZONE, gridX=1, gridY=7, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.clockTimezoneTooltipCheckButton = createCheckButton(self.tableClockSettings, text="Enable", active=False, gridX=2, gridY=7, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("clock_tooltip_timezone", self.clockTooltipTimezone)
 		
 	def createMouseWidgets(self):
@@ -923,7 +951,11 @@
 		self.tableBattery = gtk.Table(rows=8, columns=3, homogeneous=False)
 		self.tableBattery.set_row_spacings(5)
 		self.tableBattery.set_col_spacings(5)
-				
+		
+		createLabel(self.tableBattery, text="Show Battery Applet", gridX=0, gridY=0, xPadding=10)
+		self.batteryCheckButton = createCheckButton(self.tableBattery, active=False, gridX=1, gridY=0, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.registerComponent("battery", self.batteryCheckButton)
+		
 		createLabel(self.tableBattery, text="Battery Low Status (%)", gridX=0, gridY=1, xPadding=10)
 		self.batteryLow = createEntry(self.tableBattery, maxSize=6, width=8, text=BATTERY_LOW, gridX=1, gridY=1, xExpand=True, yExpand=False, handler=self.changeOccurred)
 		self.registerComponent("battery_low_status", self.batteryLow)
@@ -961,6 +993,45 @@
 		createLabel(self.tableBattery, text="Battery Background ID", gridX=0, gridY=8, xPadding=10)
 		self.batteryBg = createComboBox(self.tableBattery, ["0 (fully transparent)"] + range(1, len(self.bgs)), gridX=1, gridY=8, handler=self.changeOccurred)
 		self.registerComponent("battery_background_id", self.batteryBg)
+
+	def createLaunchersWidgets(self):
+		"""Create the Launchers widgets."""
+		self.tableLaunchers = gtk.Table(rows=8, columns=3, homogeneous=False)
+		self.tableLaunchers.set_row_spacings(5)
+		self.tableLaunchers.set_col_spacings(5)
+		
+		createLabel(self.tableLaunchers, text="Icon Theme", gridX=0, gridY=0, xPadding=10)
+		self.launchersIconTheme = createEntry(self.tableLaunchers, maxSize=12, width=12, text=LAUNCHERS_ICON_THEME, gridX=1, gridY=0, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.registerComponent("launcher_icon_theme", self.launchersIconTheme)
+		
+		createLabel(self.tableLaunchers, text="Padding (x, y)", gridX=0, gridY=1, xPadding=10)
+		self.launchersPadX = createEntry(self.tableLaunchers, maxSize=6, width=8, text=LAUNCHERS_PADDING_X, gridX=1, gridY=1, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.launchersPadY = createEntry(self.tableLaunchers, maxSize=6, width=8, text=LAUNCHERS_PADDING_Y, gridX=2, gridY=1, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		# Note: added below
+		
+		createLabel(self.tableLaunchers, text="Horizontal Spacing", gridX=0, gridY=2, xPadding=10)
+		self.launchersSpacing = createEntry(self.tableLaunchers, maxSize=6, width=8, text=LAUNCHERS_SPACING, gridX=1, gridY=2, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.registerComponent("launcher_padding", (self.launchersPadX, self.launchersPadY, self.launchersSpacing))
+		
+		createLabel(self.tableLaunchers, text="Launchers Background ID", gridX=0, gridY=3, xPadding=10)
+		self.launchersBg = createComboBox(self.tableLaunchers, ["0 (fully transparent)"] + range(1, len(self.bgs)), gridX=1, gridY=3, handler=self.changeOccurred)
+		self.registerComponent("launcher_background_id", self.launchersBg)
+		
+		createLabel(self.tableLaunchers, text="Icon Size", gridX=0, gridY=4, xPadding=10)
+		self.launchersIconSize = createEntry(self.tableLaunchers, maxSize=3, width=3, text=LAUNCHERS_ICON_SIZE, gridX=1, gridY=4, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.registerComponent("launcher_icon_size", self.launchersIconSize)
+
+		createLabel(self.tableLaunchers, text="App 1", gridX=0, gridY=5, xPadding=10)
+		self.launchersApp1 = createEntry(self.tableLaunchers, maxSize=100, width=30, text=LAUNCHERS_APP_1, gridX=1, gridY=5, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.registerComponent("launcher_item_app_1", self.launchersApp1)
+
+		createLabel(self.tableLaunchers, text="App 2", gridX=0, gridY=6, xPadding=10)
+		self.launchersApp2 = createEntry(self.tableLaunchers, maxSize=100, width=30, text=LAUNCHERS_APP_2, gridX=1, gridY=6, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.registerComponent("launcher_item_app_2", self.launchersApp2)
+
+		createLabel(self.tableLaunchers, text="App 3", gridX=0, gridY=7, xPadding=10)
+		self.launchersApp3 = createEntry(self.tableLaunchers, maxSize=100, width=30, text=LAUNCHERS_APP_3, gridX=1, gridY=7, xExpand=True, yExpand=False, handler=self.changeOccurred)
+		self.registerComponent("launcher_item_app_3", self.launchersApp3)
 		
 	def registerComponent(self, configProperty, component):
 		"""Registers a component with a particular property from
@@ -984,14 +1055,14 @@
 		gtk.about_dialog_set_url_hook(self.aboutLinkCallback)
 		about.run()
 		about.destroy()
-
-	def aboutLinkCallback(dialog, link, data=None):
+		
+	def aboutLinkCallback(self, dialog, link, data=None):
 		"""Callback for when a URL is clicked in an About dialog."""
 		try:
 			webbrowser.open(link)
 		except:
-			errorDialog(self, "Your default web-browser could not be opened.\nPlease visit %s" % link)
-
+			errorDialog(self, message = "Your default web-browser could not be opened.\nPlease visit %s" % (link,))
+		
 	def addBg(self):
 		"""Adds a new background to the list of backgrounds."""
 		self.bgs += [gtk.Table(4, 3, False)]
@@ -1111,7 +1182,7 @@
 			# Save and copy as default
 			self.save()
 			tmpSrc = self.filename
-			tmpDest = os.path.expandvars("${HOME}") + "/.config/tint2/tint2rc"
+			tmpDest = os.path.expandvars("${XDG_CONFIG_HOME}") + "/tint2/tint2rc"
 			try:
 				shutil.copyfile(tmpSrc, tmpDest)
 			except shutil.Error:
@@ -1133,9 +1204,9 @@
 				# Lastly, start it
 				os.spawnv(os.P_NOWAIT, self.tint2Bin, [self.tint2Bin, "-c", self.filename])
 
-				if confirmChange and self.filename != (os.path.expandvars("${HOME}") + "/.config/tint2/tint2rc") and confirmDialog(self, "Use this as default tint2 config?") == gtk.RESPONSE_YES:
+				if confirmChange and self.filename != (os.path.expandvars("${XDG_CONFIG_HOME}") + "/tint2/tint2rc") and confirmDialog(self, "Use this as default tint2 config?") == gtk.RESPONSE_YES:
 					tmp = self.filename
-					self.filename = os.path.expandvars("${HOME}") + "/.config/tint2/tint2rc"
+					self.filename = os.path.expandvars("${XDG_CONFIG_HOME}") + "/tint2/tint2rc"
 					try:
 						shutil.copyfile(tmp, self.filename)
 					except shutil.Error:
@@ -1260,7 +1331,7 @@
 		self.configBuf.insert(self.configBuf.get_end_iter(), "# Generated by tintwizard (http://code.google.com/p/tintwizard/)\n")
 		self.configBuf.insert(self.configBuf.get_end_iter(), "# For information on manually configuring tint2 see http://code.google.com/p/tint2/wiki/Configure\n\n")
 		if not self.oneConfigFile:
-			self.configBuf.insert(self.configBuf.get_end_iter(), "# To use this as default tint2 config: save as $HOME/.config/tint2/tint2rc\n\n")
+			self.configBuf.insert(self.configBuf.get_end_iter(), "# To use this as default tint2 config: save as $XDG_CONFIG_HOME/tint2/tint2rc\n\n")
 
 		self.configBuf.insert(self.configBuf.get_end_iter(), "# Background definitions\n")
 		for i in range(len(self.bgs)):
@@ -1285,6 +1356,7 @@
 
 		self.configBuf.insert(self.configBuf.get_end_iter(), "# Panel\n")
 		self.configBuf.insert(self.configBuf.get_end_iter(), "panel_monitor = %s\n" % (self.panelMonitor.get_text() if self.panelMonitor.get_text() else PANEL_MONITOR))
+		self.configBuf.insert(self.configBuf.get_end_iter(), "panel_items = %s\n" % (self.panelItems.get_text() if self.panelItems.get_text() else PANEL_ITEMS))
 		self.configBuf.insert(self.configBuf.get_end_iter(), "panel_position = %s %s %s\n" % (self.panelPosY.get_active_text(), self.panelPosX.get_active_text(), self.panelOrientation.get_active_text()))
 		self.configBuf.insert(self.configBuf.get_end_iter(), "panel_size = %s %s\n" % (self.panelSizeX.get_text() if self.panelSizeX.get_text() else PANEL_SIZE_X,
 															self.panelSizeY.get_text() if self.panelSizeY.get_text() else PANEL_SIZE_Y))
@@ -1311,6 +1383,9 @@
 															self.taskbarPadY.get_text() if self.taskbarPadY.get_text() else TASKBAR_PADDING_X,
 															self.taskbarSpacing.get_text() if self.taskbarSpacing.get_text() else TASK_SPACING))
 		self.configBuf.insert(self.configBuf.get_end_iter(), "taskbar_background_id = %s\n" % (self.taskbarBg.get_active()))
+		# Comment out the taskbar_active_background_id if user has "disabled" it
+		if self.taskbarActiveBgEnable.get_active() == 0:
+			self.configBuf.insert(self.configBuf.get_end_iter(), "#")
 		self.configBuf.insert(self.configBuf.get_end_iter(), "taskbar_active_background_id = %s\n" % (self.taskbarActiveBg.get_active()))
 
 		self.configBuf.insert(self.configBuf.get_end_iter(), "\n# Tasks\n")
@@ -1353,6 +1428,7 @@
 		self.configBuf.insert(self.configBuf.get_end_iter(), "font_shadow = %s\n" % int(self.fontShadowCheckButton.get_active()))
 
 		self.configBuf.insert(self.configBuf.get_end_iter(), "\n# System Tray\n")
+		self.configBuf.insert(self.configBuf.get_end_iter(), "systray = %s\n" % int(self.trayShow.get_active()))
 		self.configBuf.insert(self.configBuf.get_end_iter(), "systray_padding = %s %s %s\n" % (self.trayPadX.get_text() if self.trayPadX.get_text() else TRAY_PADDING_X,
 															self.trayPadY.get_text() if self.trayPadY.get_text() else TRAY_PADDING_Y,
 															self.traySpacing.get_text() if self.traySpacing.get_text() else TRAY_SPACING))
@@ -1363,26 +1439,33 @@
 															self.trayIconSat.get_text() if self.trayIconSat.get_text() else TRAY_ICON_SAT,
 															self.trayIconBri.get_text() if self.trayIconBri.get_text() else TRAY_ICON_BRI))
 		
-		self.configBuf.insert(self.configBuf.get_end_iter(), "\n# Clock\n")
-		self.configBuf.insert(self.configBuf.get_end_iter(), "time1_format = %s\n" % (self.clock1Format.get_text() if self.clock1Format.get_text() else CLOCK_FMT_1))
-		self.configBuf.insert(self.configBuf.get_end_iter(), "time1_font = %s\n" % (self.clock1FontButton.get_font_name()))
-		self.configBuf.insert(self.configBuf.get_end_iter(), "time2_format = %s\n" % (self.clock2Format.get_text() if self.clock2Format.get_text() else CLOCK_FMT_2))
-		self.configBuf.insert(self.configBuf.get_end_iter(), "time2_font = %s\n" % (self.clock2FontButton.get_font_name()))
-		
-		self.configBuf.insert(self.configBuf.get_end_iter(), "clock_font_color = %s %s\n" % (self.getHexFromWidget(self.clockFontColButton),
-														int(self.clockFontColButton.get_alpha() / 65535.0 * 100)))
-	
-		self.configBuf.insert(self.configBuf.get_end_iter(), "clock_tooltip = %s\n" % (self.clockTooltipFormat.get_text() if self.clockTooltipFormat.get_text() else CLOCK_TOOLTIP))
-		self.configBuf.insert(self.configBuf.get_end_iter(), "clock_padding = %s %s\n" % (self.clockPadX.get_text() if self.clockPadX.get_text() else CLOCK_PADDING_X,
-														self.clockPadY.get_text() if self.clockPadY.get_text() else CLOCK_PADDING_Y))
-		self.configBuf.insert(self.configBuf.get_end_iter(), "clock_background_id = %s\n" % (self.clockBg.get_active()))
-		if self.clockLClick.get_text():
-			self.configBuf.insert(self.configBuf.get_end_iter(), "clock_lclick_command = %s\n" % (self.clockLClick.get_text()))
-		if self.clockRClick.get_text():
-			self.configBuf.insert(self.configBuf.get_end_iter(), "clock_rclick_command = %s\n" % (self.clockRClick.get_text()))
-		self.configBuf.insert(self.configBuf.get_end_iter(), "time1_timezone = %s\n" % (self.clockTime1Timezone.get_text() if self.clockTime1Timezone.get_text() else CLOCK_TIME1_TIMEZONE))
-		self.configBuf.insert(self.configBuf.get_end_iter(), "time2_timezone = %s\n" % (self.clockTime2Timezone.get_text() if self.clockTime2Timezone.get_text() else CLOCK_TIME2_TIMEZONE))
-		self.configBuf.insert(self.configBuf.get_end_iter(), "clock_tooltip_timezone = %s\n" % (self.clockTooltipTimezone.get_text() if self.clockTooltipTimezone.get_text() else CLOCK_TOOLTIP_TIMEZONE))
+		if self.clockCheckButton.get_active():
+			self.configBuf.insert(self.configBuf.get_end_iter(), "\n# Clock\n")
+			if self.clock1CheckButton.get_active():
+				self.configBuf.insert(self.configBuf.get_end_iter(), "time1_format = %s\n" % (self.clock1Format.get_text() if self.clock1Format.get_text() else CLOCK_FMT_1))
+				self.configBuf.insert(self.configBuf.get_end_iter(), "time1_font = %s\n" % (self.clock1FontButton.get_font_name()))
+			if self.clock2CheckButton.get_active():
+				self.configBuf.insert(self.configBuf.get_end_iter(), "time2_format = %s\n" % (self.clock2Format.get_text() if self.clock2Format.get_text() else CLOCK_FMT_2))
+				self.configBuf.insert(self.configBuf.get_end_iter(), "time2_font = %s\n" % (self.clock2FontButton.get_font_name()))
+			
+			self.configBuf.insert(self.configBuf.get_end_iter(), "clock_font_color = %s %s\n" % (self.getHexFromWidget(self.clockFontColButton),
+															int(self.clockFontColButton.get_alpha() / 65535.0 * 100)))
+		
+			if self.clockTooltipCheckButton.get_active():
+				self.configBuf.insert(self.configBuf.get_end_iter(), "clock_tooltip = %s\n" % (self.clockTooltipFormat.get_text() if self.clockTooltipFormat.get_text() else CLOCK_TOOLTIP))
+			self.configBuf.insert(self.configBuf.get_end_iter(), "clock_padding = %s %s\n" % (self.clockPadX.get_text() if self.clockPadX.get_text() else CLOCK_PADDING_X,
+															self.clockPadY.get_text() if self.clockPadY.get_text() else CLOCK_PADDING_Y))
+			self.configBuf.insert(self.configBuf.get_end_iter(), "clock_background_id = %s\n" % (self.clockBg.get_active()))
+			if self.clockLClick.get_text():
+				self.configBuf.insert(self.configBuf.get_end_iter(), "clock_lclick_command = %s\n" % (self.clockLClick.get_text()))
+			if self.clockRClick.get_text():
+				self.configBuf.insert(self.configBuf.get_end_iter(), "clock_rclick_command = %s\n" % (self.clockRClick.get_text()))
+			if self.clockTimezone1CheckButton.get_active():
+				self.configBuf.insert(self.configBuf.get_end_iter(), "time1_timezone = %s\n" % (self.clockTime1Timezone.get_text() if self.clockTime1Timezone.get_text() else CLOCK_TIME1_TIMEZONE))
+			if self.clockTimezone2CheckButton.get_active():
+				self.configBuf.insert(self.configBuf.get_end_iter(), "time2_timezone = %s\n" % (self.clockTime2Timezone.get_text() if self.clockTime2Timezone.get_text() else CLOCK_TIME2_TIMEZONE))
+			if self.clockTimezoneTooltipCheckButton.get_active():
+				self.configBuf.insert(self.configBuf.get_end_iter(), "clock_tooltip_timezone = %s\n" % (self.clockTooltipTimezone.get_text() if self.clockTooltipTimezone.get_text() else CLOCK_TOOLTIP_TIMEZONE))
 			
 			
 		self.configBuf.insert(self.configBuf.get_end_iter(), "\n# Tooltips\n")
@@ -1403,6 +1486,7 @@
 		self.configBuf.insert(self.configBuf.get_end_iter(), "mouse_scroll_down = %s\n" % (self.mouseDown.get_active_text()))
 
 		self.configBuf.insert(self.configBuf.get_end_iter(), "\n# Battery\n")
+		self.configBuf.insert(self.configBuf.get_end_iter(), "battery = %s\n" % int(self.batteryCheckButton.get_active()))
 		self.configBuf.insert(self.configBuf.get_end_iter(), "battery_low_status = %s\n" % (self.batteryLow.get_text() if self.batteryLow.get_text() else BATTERY_LOW))
 		self.configBuf.insert(self.configBuf.get_end_iter(), "battery_low_cmd = %s\n" % (self.batteryLowAction.get_text() if self.batteryLowAction.get_text() else BATTERY_ACTION))
 		self.configBuf.insert(self.configBuf.get_end_iter(), "battery_hide = %s\n" % (self.batteryHide.get_text() if self.batteryHide.get_text() else BATTERY_HIDE))
@@ -1410,9 +1494,23 @@
 		self.configBuf.insert(self.configBuf.get_end_iter(), "bat2_font = %s\n" % (self.bat2FontButton.get_font_name()))
 		self.configBuf.insert(self.configBuf.get_end_iter(), "battery_font_color = %s %s\n" % (self.getHexFromWidget(self.batteryFontColButton),
 															int(self.batteryFontColButton.get_alpha() / 65535.0 * 100)))
-		self.configBuf.insert(self.configBuf.get_end_iter(), "battery_padding = %s %s\n" % (self.batteryPadX.get_text() if self.batteryPadX.get_text() else BATTERY_PADDING_Y,
+		self.configBuf.insert(self.configBuf.get_end_iter(), "battery_padding = %s %s\n" % (self.batteryPadX.get_text() if self.batteryPadX.get_text() else BATTERY_PADDING_X,
 															self.batteryPadY.get_text() if self.batteryPadY.get_text() else BATTERY_PADDING_Y))
 		self.configBuf.insert(self.configBuf.get_end_iter(), "battery_background_id = %s\n" % (self.batteryBg.get_active()))
+											 	
+		self.configBuf.insert(self.configBuf.get_end_iter(), "\n# Launchers\n")
+		self.configBuf.insert(self.configBuf.get_end_iter(), "launcher_icon_theme = %s\n" % (self.launchersIconTheme.get_text() if self.launchersIconTheme.get_text() else LAUNCHERS_ICON_THEME))
+		self.configBuf.insert(self.configBuf.get_end_iter(), "launcher_padding = %s %s %s\n" % (self.launchersPadX.get_text() if self.launchersPadX.get_text() else LAUNCHERS_PADDING_X,
+															self.launchersPadY.get_text() if self.launchersPadY.get_text() else LAUNCHERS_PADDING_Y,
+															self.launchersSpacing.get_text() if self.launchersSpacing.get_text() else LAUNCHERS_SPACING))
+		self.configBuf.insert(self.configBuf.get_end_iter(), "launcher_background_id = %s\n" % (self.launchersBg.get_active()))
+		self.configBuf.insert(self.configBuf.get_end_iter(), "launcher_icon_size = %s\n" % (self.launchersIconSize.get_text() if self.launchersIconSize.get_text() else LAUNCHERS_ICON_SIZE))
+		if self.launchersApp1.get_text():		
+			self.configBuf.insert(self.configBuf.get_end_iter(), "launcher_item_app_1 = %s\n" % (self.launchersApp1.get_text()))
+		if self.launchersApp2.get_text():		
+			self.configBuf.insert(self.configBuf.get_end_iter(), "launcher_item_app_2 = %s\n" % (self.launchersApp2.get_text()))
+		if self.launchersApp3.get_text():		
+			self.configBuf.insert(self.configBuf.get_end_iter(), "launcher_item_app_3 = %s\n" % (self.launchersApp3.get_text()))
 
 		self.configBuf.insert(self.configBuf.get_end_iter(), "\n# End of config")
 
@@ -1548,8 +1646,8 @@
 
 			chooser.destroy()
 		else:
-			self.filename = os.path.expandvars("$HOME/.config/tint2/tint2rc")
-			self.curDir = os.path.expandvars("$HOME/.config/tint2")
+			self.filename = os.path.expandvars("$XDG_CONFIG_HOME/tint2/tint2rc")
+			self.curDir = os.path.expandvars("$XDG_CONFIG_HOME/tint2")
 
 		self.readTint2Config()
 		self.generateConfig()
@@ -1611,6 +1709,27 @@
 		string = string.strip()										# Remove whitespace from the VALUE
 		eType = type(prop)											# Get widget type
 
+		if special:													# 'Special' properties are those which are optional
+			if propType == "time1":
+				self.clockCheckButton.set_active(True)
+				self.clock1CheckButton.set_active(True)
+			elif propType == "time2":
+				self.clockCheckButton.set_active(True)
+				self.clock2CheckButton.set_active(True)
+			elif propType == "clock_tooltip":
+				self.clockCheckButton.set_active(True)
+				self.clockTooltipCheckButton.set_active(True)
+			elif propType == "time1_timezone":
+				self.clockTimezone1CheckButton.set_active(True)
+			elif propType == "time2_timezone":
+				self.clockTimezone2CheckButton.set_active(True)
+			elif propType == "tooltip_timezone":
+				self.clockTimezoneTooltipCheckButton.set_active(True)
+			elif propType == "systray":
+				self.trayShow.set_active(True)
+			elif propType == "activeBg":
+				self.taskbarActiveBgEnable.set_active(True)
+
 		if eType == gtk.Entry:
 			prop.set_text(string)
 			prop.activate()
@@ -1680,7 +1799,7 @@
 			# don't need tintwizard.conf
 			return
 
-		pathName = os.path.expandvars("${HOME}") + "/.config/tint2/"
+		pathName = os.path.expandvars("${XDG_CONFIG_HOME}") + "/tint2/"
 
 		if not os.path.exists(pathName + "tintwizard.conf"):
 			self.writeConf()
@@ -1707,6 +1826,17 @@
 
 		f.close()
 
+		# Deselect the optional stuff, and we'll re-check them if the config has them enabled
+		self.clockCheckButton.set_active(False)
+		self.clock1CheckButton.set_active(False)
+		self.clock2CheckButton.set_active(False)
+		self.clockTooltipCheckButton.set_active(False)
+		self.clockTimezone1CheckButton.set_active(False)
+		self.clockTimezone2CheckButton.set_active(False)
+		self.clockTimezoneTooltipCheckButton.set_active(False)
+		self.trayShow.set_active(False)
+		self.taskbarActiveBgEnable.set_active(False)
+
 		# Remove all background styles so we can create new ones as we read them
 		for i in range(len(self.bgs)):
 			self.delBgClick(None, False)
@@ -1742,7 +1872,6 @@
 		self.panelPosY.set_active(0)
 		self.panelPosX.set_active(0)
 		self.panelOrientation.set_active(0)
-		self.panelItems.set_text(PANEL_ITEMS)
 		self.panelSizeX.set_text(PANEL_SIZE_X)
 		self.panelSizeY.set_text(PANEL_SIZE_Y)
 		self.panelMarginX.set_text(PANEL_MARGIN_X)
@@ -1755,6 +1884,7 @@
 		self.panelDock.set_active(0)
 		self.panelLayer.set_active(0)
 		self.panelMonitor.set_text(PANEL_MONITOR)
+		self.panelItems.set_text(PANEL_ITEMS)
 		self.panelAutohide.set_active(0)
 		self.panelAutohideShow.set_text(PANEL_AUTOHIDE_SHOW)
 		self.panelAutohideHide.set_text(PANEL_AUTOHIDE_HIDE)
@@ -1767,6 +1897,7 @@
 		self.taskbarSpacing.set_text(TASK_SPACING)
 		self.taskbarBg.set_active(0)
 		self.taskbarActiveBg.set_active(0)
+		self.taskbarActiveBgEnable.set_active(0)
 		# Tasks
 		self.taskBlinks.set_text(TASK_BLINKS)
 		self.taskCentreCheckButton.set_active(True)
@@ -1809,6 +1940,7 @@
 		self.fontIconifiedCol.set_text(self.defaults["fgColor"])
 		self.fontShadowCheckButton.set_active(False)
 		# System Tray
+		self.trayShow.set_active(True)
 		self.trayPadX.set_text(TRAY_PADDING_X)
 		self.trayPadY.set_text(TRAY_PADDING_X)
 		self.traySpacing.set_text(TRAY_SPACING)
@@ -1819,10 +1951,14 @@
 		self.trayIconSat.set_text(TRAY_ICON_SAT)
 		self.trayIconBri.set_text(TRAY_ICON_BRI)
 		# Clock
+		self.clockCheckButton.set_active(True)
 		self.clock1Format.set_text(CLOCK_FMT_1)
+		self.clock1CheckButton.set_active(True)
 		self.clock1FontButton.set_font_name(self.defaults["font"])
 		self.clock2Format.set_text(CLOCK_FMT_2)
+		self.clock2CheckButton.set_active(True)
 		self.clockTooltipFormat.set_text(CLOCK_TOOLTIP)
+		self.clockTooltipCheckButton.set_active(False)
 		self.clock2FontButton.set_font_name(self.defaults["font"])
 		self.clockFontColButton.set_alpha(65535)
 		self.clockFontColButton.set_color(gtk.gdk.color_parse(self.defaults["fgColor"]))
@@ -1833,8 +1969,11 @@
 		self.clockLClick.set_text(CLOCK_LCLICK)
 		self.clockRClick.set_text(CLOCK_RCLICK)
 		self.clockTime1Timezone.set_text(CLOCK_TIME1_TIMEZONE)
+		self.clockTimezone1CheckButton.set_active(False)
 		self.clockTime2Timezone.set_text(CLOCK_TIME2_TIMEZONE)
+		self.clockTimezone2CheckButton.set_active(False)
 		self.clockTooltipTimezone.set_text(CLOCK_TOOLTIP_TIMEZONE)
+		self.clockTimezoneTooltipCheckButton.set_active(False)
 		# Tooltips
 		self.tooltipShow.set_active(False)
 		self.tooltipPadX.set_text(TOOLTIP_PADDING_X)
@@ -1852,6 +1991,7 @@
 		self.mouseUp.set_active(0)
 		self.mouseDown.set_active(0)
 		# Battery
+		self.batteryCheckButton.set_active(False)
 		self.batteryLow.set_text(BATTERY_LOW)
 		self.batteryLowAction.set_text(BATTERY_ACTION)
 		self.batteryHide.set_text(BATTERY_HIDE)
@@ -1863,6 +2003,18 @@
 		self.batteryPadX.set_text(BATTERY_PADDING_Y)
 		self.batteryPadY.set_text(BATTERY_PADDING_Y)
 		self.batteryBg.set_active(0)
+		# Launchers
+		self.launchersIconTheme.set_text(LAUNCHERS_ICON_THEME)
+		self.launchersPadX.set_text(LAUNCHERS_PADDING_X)
+		self.launchersPadY.set_text(LAUNCHERS_PADDING_Y)
+		self.launchersSpacing.set_text(LAUNCHERS_SPACING)
+		self.launchersBg.set_active(0)
+		self.launchersIconSize.set_text(LAUNCHERS_ICON_SIZE)
+		self.launchersApp1.set_text(LAUNCHERS_APP_1)
+		self.launchersApp2.set_text(LAUNCHERS_APP_2)
+		self.launchersApp3.set_text(LAUNCHERS_APP_3)
+
+
 	
 	def save(self, widget=None, event=None):
 		"""Saves the generated config file."""
@@ -1924,8 +2076,8 @@
 	def saveAsDef(self, widget=None, event=None):
 		"""Saves the config as the default tint2 config."""
 		if confirmDialog(self, "Overwrite current tint2 default config?") == gtk.RESPONSE_YES:
-			self.filename = os.path.expandvars("${HOME}") + "/.config/tint2/tint2rc"
-			self.curDir = os.path.expandvars("${HOME}") + "/.config/tint2"
+			self.filename = os.path.expandvars("${XDG_CONFIG_HOME}") + "/tint2/tint2rc"
+			self.curDir = os.path.expandvars("${XDG_CONFIG_HOME}") + "/tint2"
 
 			# If, for whatever reason, tint2 has no default config - create one.
 			if not os.path.isfile(self.filename):
@@ -1952,7 +2104,7 @@
 
 	def updateComboBoxes(self, i, action="add"):
 		"""Updates the contents of a combo box when a background style has been added/removed."""
-		cbs = [self.batteryBg, self.clockBg, self.taskbarBg, self.taskbarActiveBg, self.trayBg, self.taskActiveBg, self.taskBg, self.panelBg, self.tooltipBg, self.taskUrgentBg, self.taskIconifiedBg]
+		cbs = [self.batteryBg, self.clockBg, self.taskbarBg, self.taskbarActiveBg, self.trayBg, self.taskActiveBg, self.taskBg, self.panelBg, self.tooltipBg, self.taskUrgentBg, self.taskIconifiedBg, self.launchersBg]
 
 		if action == "add":
 			for cb in cbs:
@@ -1986,7 +2138,7 @@
 		
 		confStr += "#End\n"
 		
-		pathName = os.path.expandvars("${HOME}") + "/.config/tint2/"
+		pathName = os.path.expandvars("${XDG_CONFIG_HOME}") + "/tint2/"
 		
 		f = open(pathName+"tintwizard.conf", "w")
 		
@@ -2094,7 +2246,7 @@
 	
 	return temp
 
-def confirmDialog(parent, message):
+def confirmDialog(parent=None, message="Confirm?"):
 	"""Creates a confirmation dialog and returns the response."""
 	dialog = gtk.MessageDialog(parent, gtk.DIALOG_MODAL, gtk.MESSAGE_QUESTION, gtk.BUTTONS_YES_NO, message)
 	dialog.show()
@@ -2142,4 +2294,3 @@
 	
 	tw = TintWizardGUI()
 	tw.main()
-
